using System;using System.Collections.Generic;using System.Collections.ObjectModel;using System.Threading.Tasks;using System.Windows;using System.Windows.Input;using GalaSoft.MvvmLight;using GalaSoft.MvvmLight.CommandWpf;using InformationSystemsAndTechnologies.DataBase;using InformationSystemsAndTechnologies.Model;using InformationSystemsAndTechnologies.View;namespace InformationSystemsAndTechnologies.ViewModel{    class MarketPagePersonalViewModel : ViewModelBase    {        private ProductsLogic productsLogic;        private ReportsLogic reportsLogic;        private int saveId;        private NewProductViewModel newProductViewModel;        private ReportPageViewModel reportPageViewModel;        public MarketPagePersonalViewModel()        {            LoadProducts();            reportsLogic = ReportsLogic.GetInstance();            CountSmall = reportsLogic.GetCountProducts();            Condition = "Visible";            Position = StaffsLogic.GetPosition();            FirstName = StaffsLogic.GetName();            LastName = StaffsLogic.GetSurname();            IsView = false;            ViewProduct = new RelayCommand<int>(Data);            DeleteProduct = new RelayCommand<int>(Delete);            NameText = "Изменить";            IsReadonlyName = true;            PriceText = "Изменить";            IsReadonlyPrice = true;            CountText = "Изменить";            IsReadonlyCount = true;            WeightText = "Изменить";            IsReadonlyWeight = true;            ColorText = "Изменить";            IsReadonlyColor = true;            DescriptionText = "Изменить";            IsReadonlyDescription = true;            saveId = -1;        }        public string Condition { get; set; }        public string Position { get; set; }        public string FirstName { get; set; }        public string LastName { get; set; }        public ObservableCollection<Product> Products { get; set; }        public bool IsView { get; set; }        public string Name { get; set; }        public string NameText { get; set; }        public bool IsReadonlyName { get; set; }        public ICommand NameClick        {            get            {                return new RelayCommand(() =>                {                    if (NameText == "Изменить")                    {                        NameText = "Сохранить";                        IsReadonlyName = false;                    }                    else                    {                        productsLogic.UpdateNameAsync(GetProductById().Id, Name);                        NameText = "Изменить";                        IsReadonlyName = true;                        Products = new ObservableCollection<Product>(productsLogic.GetListProducts());                    }                });            }        }        public string Price { get; set; }        public string PriceText { get; set; }        public bool IsReadonlyPrice { get; set; }        public ICommand PriceClick        {            get            {                return new RelayCommand(() =>                {                    if (PriceText == "Изменить")                    {                        PriceText = "Сохранить";                        IsReadonlyPrice = false;                    }                    else                    {                        productsLogic.UpdatePriceAsync(saveId, Convert.ToInt32(Price));                        PriceText = "Изменить";                        IsReadonlyPrice = true;                        Products = new ObservableCollection<Product>(productsLogic.GetListProducts());                    }                });            }        }        public string Count { get; set; }        public string CountText { get; set; }        public bool IsReadonlyCount { get; set; }        public ICommand CountClick        {            get            {                return new RelayCommand(() =>                {                    if (CountText == "Изменить")                    {                        CountText = "Сохранить";                        IsReadonlyCount = false;                    }                    else                    {                        productsLogic.UpdateCountAsync(saveId, Convert.ToInt32(Count));                        if (Convert.ToInt32(Count) > 10)                        {                            reportsLogic.DeleteProductInReport(saveId);                            if (CountSmall == 0)                            {                                CountSmall = 0;                            }                            else                            {                                CountSmall -= 1;                            }                        }                        else                        {                            CountSmall = 1;                        }                        CountText = "Изменить";                        IsReadonlyCount = true;                        Products = new ObservableCollection<Product>(productsLogic.GetListProducts());                    }                });            }        }        public string Weight { get; set; }        public string WeightText { get; set; }        public bool IsReadonlyWeight { get; set; }        public ICommand WeightClick        {            get            {                return new RelayCommand(() =>                {                    if (WeightText == "Изменить")                    {                        WeightText = "Сохранить";                        IsReadonlyWeight = false;                    }                    else                    {                        productsLogic.UpdateWeightAsync(saveId, Convert.ToDouble(Weight));                        WeightText = "Изменить";                        IsReadonlyWeight = true;                        Products = new ObservableCollection<Product>(productsLogic.GetListProducts());                    }                });            }        }        public string Color { get; set; }        public string ColorText { get; set; }        public bool IsReadonlyColor { get; set; }        public ICommand ColorClick        {            get            {                return new RelayCommand(() =>                {                    if (ColorText == "Изменить")                    {                        ColorText = "Сохранить";                        IsReadonlyColor = false;                    }                    else                    {                        productsLogic.UpdateColorAsync(saveId, Color);                        ColorText = "Изменить";                        IsReadonlyColor = true;                        Products = new ObservableCollection<Product>(productsLogic.GetListProducts());                    }                });            }        }        public string Description { get; set; }        public string DescriptionText { get; set; }        public bool IsReadonlyDescription { get; set; }        public ICommand DescriptionClick        {            get            {                return new RelayCommand(() =>                {                    if (DescriptionText == "Изменить")                    {                        DescriptionText = "Сохранить";                        IsReadonlyDescription = false;                    }                    else                    {                        productsLogic.UpdateDescriptionAsync(saveId, Description);                        DescriptionText = "Изменить";                        IsReadonlyDescription = true;                        Products = new ObservableCollection<Product>(productsLogic.GetListProducts());                    }                });            }        }        public int CountSmall { get; set; }        public RelayCommand<int> ViewProduct { get; set; }        public RelayCommand<int> DeleteProduct { get; set; }        public ICommand Orders        {            get            {                return  new RelayCommand(() =>                {                    NewPage = new OrdersPageView();                    NewPage.DataContext = new OrdersPageViewModel();                });            }        }        public ICommand Report        {            get            {                return new RelayCommand(() =>                {                    reportPageViewModel = new ReportPageViewModel(LastName + " " + FirstName);                    NewPage = new ReportPageView();                    NewPage.DataContext = reportPageViewModel;                    WaitingReport();                });            }        }        public ICommand Add        {            get            {                return new RelayCommand(() =>                {                    newProductViewModel = new NewProductViewModel();                    NewPage = new NewProductView();                    NewPage.DataContext = newProductViewModel;                    Waiting();                });            }        }        public ICommand Cancel        {            get            {                return new RelayCommand(() => Condition = "Collapsed");            }        }        public FrameworkElement NewPage { get; set; }        private void Data(int Id)        {            if (saveId == Id)            {                IsView = false;                saveId = -1;            }            else            {                IsView = true;                saveId = Id;                Сompletion();            }        }        private void Delete(int id)        {            IsView = saveId != id && IsView;            saveId = id;            Product product = GetProductById();            Products.Remove(product);            productsLogic.DeleteProductAsync(product.Id);        }        private void Сompletion()        {            Product product = GetProductById();            Name = product.Name;            Price = product.Price.ToString();            Count = product.Count.ToString();            Weight = product.Weight.ToString();            Color = product.Color;            Description = product.Description;        }        private Product GetProductById()        {            IEnumerator<Product> iterator = Products.GetEnumerator();            while (iterator.MoveNext())            {                if (iterator.Current != null && iterator.Current.Id == saveId)                {                    return iterator.Current;                }            }            return null;        }        private void LoadProducts()        {            Task.Run(() =>            {                productsLogic = ProductsLogic.GetInstance();                while (productsLogic.GetListProducts() == null);                Products = new ObservableCollection<Product>(productsLogic.GetListProducts());            });        }        private void Waiting()        {            Task.Run(() =>            {                while (newProductViewModel.Condition == "Visible") ;                Products = new ObservableCollection<Product>(productsLogic.GetListProducts());            });        }        private void WaitingReport()        {            Task.Run(() =>            {                while (reportPageViewModel.Condition == "Visible") ;                CountSmall = reportsLogic.GetCountProducts();            });        }    }}